name: 'CalVer Tag Generator'
description: 'Generates CalVer tags with automatic increment for same-day releases'
author: 'NVisionX Team'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
    default: ${{ github.token }}
  repository:
    description: 'Repository name (owner/repo)'
    required: true
    default: ${{ github.repository }}
  prefix:
    description: 'Optional prefix for the tag (e.g., "dev", "prod")'
    required: false
    default: ''
  use-sequence:
    description: 'Whether to use sequence numbering for same-day releases'
    required: false
    default: 'true'

outputs:
  tag:
    description: 'Generated CalVer tag'
    value: ${{ steps.generate.outputs.tag }}
  create_release:
    description: 'Whether a release should be created'
    value: ${{ steps.generate.outputs.create_release }}
  increment:
    description: 'Increment number for the day'
    value: ${{ steps.generate.outputs.increment }}

runs:
  using: 'composite'
  steps:
    - name: Generate CalVer tag
      id: generate
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
        REPOSITORY: ${{ inputs.repository }}
        PREFIX: ${{ inputs.prefix }}
        USE_SEQUENCE: ${{ inputs.use-sequence }}
      run: |
        set -e
        
        DATE=$(date +'%Y.%m.%d')
        
        echo "üìÖ Generating CalVer tag for date: $DATE"
        echo "üè∑Ô∏è Prefix: ${PREFIX:-'(none)'}"
        echo "üî¢ Use sequence: $USE_SEQUENCE"
        echo "üîë Repository: $REPOSITORY"
        
        # Initialize variables with safe defaults
        INCREMENT=1
        TAG=""
        CREATE_RELEASE="true"
        
        # Fetch all tags to ensure we have the latest state
        echo "üîÑ Fetching tags..."
        git fetch --tags 2>/dev/null || echo "‚ö†Ô∏è Failed to fetch tags, continuing..."
        
        # Build base tag format
        if [ -n "$PREFIX" ]; then
          BASE_TAG="${PREFIX}${DATE}"
        else
          BASE_TAG="$DATE"
        fi
        
        if [ "$USE_SEQUENCE" = "true" ]; then
          # Simple approach for counting existing tags
          echo "üîç Checking for existing tags..."
          
          if [ -n "$PREFIX" ]; then
            EXISTING_COUNT=$(git tag -l "${PREFIX}${DATE}-*" 2>/dev/null | wc -l | tr -d ' ')
          else
            EXISTING_COUNT=$(git tag -l "${DATE}-*" 2>/dev/null | wc -l | tr -d ' ')
          fi
          
          # Ensure EXISTING_COUNT is a number, default to 0
          if [ -z "$EXISTING_COUNT" ]; then
            EXISTING_COUNT=0
          fi
          
          echo "üîç Found $EXISTING_COUNT existing tags for today"
          
          # Calculate next increment
          INCREMENT=$((EXISTING_COUNT + 1))
          TAG="$BASE_TAG-$INCREMENT"
          
          # Simple check if tag exists
          if git tag -l "$TAG" 2>/dev/null | grep -q "^$TAG$"; then
            INCREMENT=$((INCREMENT + 1))
            TAG="$BASE_TAG-$INCREMENT"
            echo "üîÑ Tag exists, using: $TAG"
          fi
          
          echo "‚úÖ Selected tag: $TAG (increment: $INCREMENT)"
          
        else
          # No sequence - just check if base tag exists
          TAG="$BASE_TAG"
          
          if git tag -l "$TAG" 2>/dev/null | grep -q "^$TAG$"; then
            echo "‚ö†Ô∏è Tag $TAG already exists! Sequence is disabled but tag exists."
            CREATE_RELEASE="false"
            INCREMENT=0
            echo "‚ùå Skipping tag creation due to conflict"
          else
            echo "üéâ Creating tag without sequence: $TAG"
            INCREMENT=0
          fi
          
          echo "‚úÖ Selected tag: $TAG (no sequence)"
        fi
        
        # Set outputs (ensure they're always set)
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "create_release=${CREATE_RELEASE}" >> $GITHUB_OUTPUT
        echo "increment=${INCREMENT}" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Outputs set - Tag: $TAG, Create Release: $CREATE_RELEASE, Increment: $INCREMENT"
        
        # Only create and push tag if CREATE_RELEASE is true
        if [ "$CREATE_RELEASE" = "true" ]; then
          # Configure git and create tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Set remote URL with token for authentication
          git remote set-url origin https://x-access-token:$GH_TOKEN@github.com/$REPOSITORY.git 2>/dev/null || echo "‚ö†Ô∏è Failed to set remote URL"
          
          # Create and push tag safely
          if git tag "$TAG" 2>/dev/null; then
            echo "üè∑Ô∏è Created local tag: $TAG"
            if git push origin "$TAG" 2>/dev/null; then
              echo "‚úÖ Successfully pushed tag: $TAG"
            else
              echo "‚ö†Ô∏è Failed to push tag, but continuing..."
            fi
          else
            echo "‚ö†Ô∏è Tag may already exist locally, but continuing..."
          fi
        else
          echo "‚è≠Ô∏è Skipping tag creation because CREATE_RELEASE is false"
        fi
